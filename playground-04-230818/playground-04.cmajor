
/*
    This file was auto-generated by the cmaj VScode extension!
    https://cmajor.dev
*/

// Here's a very simple graph that plays a sine-wave to get you started..

graph playgroun04 [[ main ]]
{
   output stream float out;

   input event float32 oscillatorFrequencyParam     [[name: "Oscillator Frequency", min: 0,     max: 2000,  init: 440]];
   input event float32 filterCutoffParam            [[name: "Filter Cutoff",        min: 0,     max: 2000,  init: 2000]];
   input event float32 filterResonanceParam         [[name: "Filter Resonance",     min: 0.1,   max: 10,    init: 1,    step: 0.01]];
   input event float32 gainVolumeParam              [[name: "Gain Volume",          min: 0,     max: 1,     init: 0.2,  step: 0.01]];

   node {
    oscillator = std::oscillators::Phasor(float32, 440);
    filter = std::filters::tpt::svf::Processor;
    
    gainToDb = GainToDb;
    gain = std::levels::SmoothedGain(float32, 0.02f);
   }

   connection {
    oscillatorFrequencyParam    -> oscillator.frequencyIn;
    filterCutoffParam           -> filter.frequency;
    filterResonanceParam        -> filter.q;
    gainVolumeParam             -> gainToDb         -> gain.volume;

    oscillator.out -> filter.in;
    filter.out -> gain.in;
    gain.out -> out;
   }
}

processor GainToDb 
{
    input event float32 gain;
    output event float32 volume;

    event gain(float32 f) {
        volume <- std::levels::gainTodB (f);
    }
}
