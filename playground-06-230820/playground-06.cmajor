
/*
    This file was auto-generated by the cmaj VScode extension!
    https://cmajor.dev
*/

// Here's a very simple graph that plays a sine-wave to get you started..
graph playground06 [[main]] 
{
    output stream float out;
    input event std::midi::Message midiIn;

    input event float32 frequencyParam [[name: "Frequency", min: 0, max: 2000, init: 440]];
    input value float32 gainParam [[name: "Gain", min: 0, max: 1, init: 0.5]];

    node
    {
        noteToFrequency = NoteToFrequency;
        osc1 = Oscillator;
        envelope = std::envelopes::FixedASR (0.01f, 0.1f);
    }

    connection
    {
        // Use mpe converter to convert midi messages to note events
        // Send the note one events to trigger the envelope
        midiIn -> std::midi::MPEConverter -> envelope.eventIn;
        midiIn -> std::midi::MPEConverter -> noteToFrequency -> osc1.frequencyIn;

        // Multiply the envelope gain with the oscillator output
        (envelope.gainOut * gainParam * osc1.out) -> out;
    }
}

graph Oscillator 
{
    output stream float out;
    input event float frequencyIn;
    
    node {
        phasor = std::oscillators::Phasor (float32);
        sine = std::oscillators::Sine (float32);
        mixer = std::mixers::ConstantSum (float32, 0.5f, 0.5f);
    }

    connection {
        frequencyIn -> phasor.frequencyIn;
        frequencyIn -> sine.frequencyIn;

        phasor.out -> mixer.in1;
        sine.out -> mixer.in2;

        mixer.out -> out;
    }
}

processor NoteToFrequency
{
    input event std::notes::NoteOn eventIn;
    output event float32 frequencyOut;

    event eventIn (std::notes::NoteOn e)
    {
        frequencyOut <- std::notes::noteToFrequency (e.pitch);
    }
}
